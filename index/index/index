<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>第一人稱射擊遊戲</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            font-family: 'Arial', sans-serif;
            overflow: hidden;
            cursor: none;
        }
        
        #gameCanvas {
            display: block;
            background: linear-gradient(to bottom, #87CEEB 0%, #98FB98 100%);
        }
        
        #ui {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 10;
        }
        
        #crosshair {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid #ff0000;
            border-radius: 50%;
            opacity: 0.8;
        }
        
        #crosshair::before,
        #crosshair::after {
            content: '';
            position: absolute;
            background: #ff0000;
        }
        
        #crosshair::before {
            width: 2px;
            height: 10px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        
        #crosshair::after {
            width: 10px;
            height: 2px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        
        #stats {
            position: absolute;
            top: 20px;
            left: 20px;
            color: #fff;
            font-size: 18px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            background: rgba(0,0,0,0.5);
            padding: 15px;
            border-radius: 10px;
        }
        
        #minimap {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 150px;
            height: 150px;
            background: rgba(0,0,0,0.7);
            border: 2px solid #fff;
            border-radius: 10px;
        }
        
        #instructions {
            position: absolute;
            bottom: 20px;
            left: 20px;
            color: #fff;
            font-size: 14px;
            background: rgba(0,0,0,0.7);
            padding: 10px;
            border-radius: 5px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
        }
        
        #gameOver {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.9);
            color: #fff;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            display: none;
            pointer-events: all;
        }
        
        #restartBtn {
            background: #ff4444;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 15px;
            transition: background 0.3s;
        }
        
        #restartBtn:hover {
            background: #ff6666;
        }
        
        .hit-indicator {
            position: absolute;
            color: #ff0000;
            font-size: 24px;
            font-weight: bold;
            pointer-events: none;
            animation: hitFade 1s ease-out forwards;
        }
        
        @keyframes hitFade {
            0% {
                opacity: 1;
                transform: translateY(0px);
            }
            100% {
                opacity: 0;
                transform: translateY(-50px);
            }
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    
    <div id="ui">
        <div id="crosshair"></div>
        
        <div id="stats">
            <div>生命值: <span id="health">100</span></div>
            <div>彈藥: <span id="ammo">30</span>/∞</div>
            <div>得分: <span id="score">0</span></div>
            <div>敵人: <span id="enemies">0</span></div>
        </div>
        
        <canvas id="minimap"></canvas>
        
        <div id="instructions">
            WASD: 移動 | 滑鼠: 轉向 | 左鍵: 射擊 | R: 換彈 | ESC: 暫停
        </div>
        
        <div id="gameOver">
            <h2 id="gameOverTitle">遊戲結束</h2>
            <p id="finalScore">最終得分: 0</p>
            <button id="restartBtn" onclick="restartGame()">重新開始</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // 遊戲變數
        let scene, camera, renderer, player;
        let enemies = [];
        let bullets = [];
        let walls = [];
        let gameState = {
            health: 100,
            ammo: 30,
            maxAmmo: 30,
            score: 0,
            isReloading: false,
            gameOver: false,
            paused: false
        };
        
        // 控制變數
        let keys = {};
        let mouse = { x: 0, y: 0, sensitivity: 0.002 };
        let clock = new THREE.Clock();
        
        // 音效模擬
        const playSound = (type) => {
            console.log(`Playing ${type} sound`);
        };

        // 初始化遊戲
        function initGame() {
            // 創建場景
            scene = new THREE.Scene();
            scene.fog = new THREE.Fog(0x87CEEB, 50, 200);
            
            // 創建攝影機
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 5, 0);
            
            // 創建渲染器
            const canvas = document.getElementById('gameCanvas');
            renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x87CEEB);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            
            // 創建光源
            const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);
            directionalLight.position.set(50, 100, 50);
            directionalLight.castShadow = true;
            directionalLight.shadow.mapSize.width = 2048;
            directionalLight.shadow.mapSize.height = 2048;
            scene.add(directionalLight);
            
            // 創建玩家
            createPlayer();
            
            // 創建地圖
            createMap();
            
            // 開始遊戲循環
            animate();
            
            // 生成敵人
            spawnEnemies();
            
            // 設置事件監聽
            setupEventListeners();
            
            // 鎖定滑鼠指針
            canvas.requestPointerLock();
        }
        
        function createPlayer() {
            // 玩家是攝影機本身，添加武器模型
            const weaponGeometry = new THREE.BoxGeometry(0.3, 0.1, 1);
            const weaponMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
            const weapon = new THREE.Mesh(weaponGeometry, weaponMaterial);
            weapon.position.set(0.5, -0.3, -0.8);
            camera.add(weapon);
            
            player = {
                position: camera.position,
                velocity: new THREE.Vector3(),
                weapon: weapon,
                lastShot: 0
            };
        }
        
        function createMap() {
            // 創建地面
            const groundGeometry = new THREE.PlaneGeometry(200, 200);
            const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x90EE90 });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = -Math.PI / 2;
            ground.receiveShadow = true;
            scene.add(ground);
            
            // 創建牆壁
            createWalls();
            
            // 創建一些障礙物
            createObstacles();
        }
        
        function createWalls() {
            const wallMaterial = new THREE.MeshPhongMaterial({ color: 0x8B4513 });
            
            // 邊界牆壁
            const wallPositions = [
                { x: 0, z: 100, w: 200, h: 10 },
                { x: 0, z: -100, w: 200, h: 10 },
                { x: 100, z: 0, w: 10, h: 200 },
                { x: -100, z: 0, w: 10, h: 200 }
            ];
            
            wallPositions.forEach(pos => {
                const wallGeometry = new THREE.BoxGeometry(pos.w, 20, pos.h);
                const wall = new THREE.Mesh(wallGeometry, wallMaterial);
                wall.position.set(pos.x, 10, pos.z);
                wall.castShadow = true;
                wall.receiveShadow = true;
                scene.add(wall);
                walls.push(wall);
            });
        }
        
        function createObstacles() {
            const obstacleMaterial = new THREE.MeshPhongMaterial({ color: 0x696969 });
            
            for (let i = 0; i < 15; i++) {
                const size = Math.random() * 3 + 2;
                const obstacle = new THREE.Mesh(
                    new THREE.BoxGeometry(size, size * 2, size),
                    obstacleMaterial
                );
                
                obstacle.position.set(
                    (Math.random() - 0.5) * 150,
                    size,
                    (Math.random() - 0.5) * 150
                );
                
                obstacle.castShadow = true;
                obstacle.receiveShadow = true;
                scene.add(obstacle);
                walls.push(obstacle);
            }
        }
        
        function spawnEnemies() {
            for (let i = 0; i < 8; i++) {
                createEnemy();
            }
        }
        
        function createEnemy() {
            const enemyGeometry = new THREE.CapsuleGeometry(1, 3);
            const enemyMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
            const enemy = new THREE.Mesh(enemyGeometry, enemyMaterial);
            
            // 隨機位置生成
            do {
                enemy.position.set(
                    (Math.random() - 0.5) * 180,
                    2.5,
                    (Math.random() - 0.5) * 180
                );
            } while (enemy.position.distanceTo(camera.position) < 20);
            
            enemy.castShadow = true;
            enemy.health = 100;
            enemy.lastAttack = 0;
            enemy.speed = 0.8 + Math.random() * 0.4;
            
            scene.add(enemy);
            enemies.push(enemy);
        }
        
        function updateEnemies(deltaTime) {
            enemies.forEach((enemy, index) => {
                if (enemy.health <= 0) {
                    scene.remove(enemy);
                    enemies.splice(index, 1);
                    gameState.score += 100;
                    updateUI();
                    
                    // 生成新敵人
                    setTimeout(() => {
                        createEnemy();
                    }, 3000);
                    return;
                }
                
                // AI移動
                const direction = new THREE.Vector3()
                    .subVectors(camera.position, enemy.position)
                    .normalize();
                
                enemy.position.add(direction.multiplyScalar(enemy.speed * deltaTime));
                enemy.lookAt(camera.position);
                
                // 敵人攻擊
                const distance = enemy.position.distanceTo(camera.position);
                if (distance < 5 && Date.now() - enemy.lastAttack > 1000) {
                    enemy.lastAttack = Date.now();
                    gameState.health -= 10;
                    playSound('hit');
                    
                    if (gameState.health <= 0) {
                        endGame();
                    }
                    updateUI();
                }
            });
        }
        
        function shoot() {
            if (gameState.ammo <= 0 || gameState.isReloading || gameState.gameOver) {
                return;
            }
            
            gameState.ammo--;
            playSound('shoot');
            
            // 創建子彈
            const bulletGeometry = new THREE.SphereGeometry(0.1);
            const bulletMaterial = new THREE.MeshPhongMaterial({ color: 0xffff00 });
            const bullet = new THREE.Mesh(bulletGeometry, bulletMaterial);
            
            bullet.position.copy(camera.position);
            bullet.position.y -= 0.2;
            
            const direction = new THREE.Vector3(0, 0, -1);
            direction.applyQuaternion(camera.quaternion);
            bullet.direction = direction;
            bullet.speed = 100;
            bullet.life = 2000;
            bullet.born = Date.now();
            
            scene.add(bullet);
            bullets.push(bullet);
            
            // 武器後坐力動畫
            player.weapon.position.z = -1;
            setTimeout(() => {
                player.weapon.position.z = -0.8;
            }, 100);
            
            updateUI();
        }
        
        function updateBullets(deltaTime) {
            bullets.forEach((bullet, index) => {
                // 移動子彈
                bullet.position.add(
                    bullet.direction.clone().multiplyScalar(bullet.speed * deltaTime)
                );
                
                // 檢查子彈壽命
                if (Date.now() - bullet.born > bullet.life) {
                    scene.remove(bullet);
                    bullets.splice(index, 1);
                    return;
                }
                
                // 檢查碰撞
                checkBulletCollisions(bullet, index);
            });
        }
        
        function checkBulletCollisions(bullet, bulletIndex) {
            // 檢查與敵人的碰撞
            enemies.forEach(enemy => {
                if (bullet.position.distanceTo(enemy.position) < 2) {
                    enemy.health -= 25;
                    scene.remove(bullet);
                    bullets.splice(bulletIndex, 1);
                    
                    // 顯示傷害指示器
                    showHitIndicator(enemy.position);
                    
                    if (enemy.health <= 0) {
                        playSound('enemyDie');
                    } else {
                        playSound('enemyHit');
                    }
                }
            });
            
            // 檢查與牆壁的碰撞
            walls.forEach(wall => {
                const box = new THREE.Box3().setFromObject(wall);
                if (box.containsPoint(bullet.position)) {
                    scene.remove(bullet);
                    bullets.splice(bulletIndex, 1);
                }
            });
        }
        
        function showHitIndicator(position) {
            const indicator = document.createElement('div');
            indicator.className = 'hit-indicator';
            indicator.textContent = '-25';
            indicator.style.left = Math.random() * window.innerWidth + 'px';
            indicator.style.top = Math.random() * 100 + 200 + 'px';
            
            document.body.appendChild(indicator);
            
            setTimeout(() => {
                document.body.removeChild(indicator);
            }, 1000);
        }
        
        function reload() {
            if (gameState.isReloading || gameState.ammo === gameState.maxAmmo) return;
            
            gameState.isReloading = true;
            playSound('reload');
            
            setTimeout(() => {
                gameState.ammo = gameState.maxAmmo;
                gameState.isReloading = false;
                updateUI();
            }, 2000);
        }
        
        function handleMovement(deltaTime) {
            if (gameState.gameOver || gameState.paused) return;
            
            const moveSpeed = 25;
            const velocity = new THREE.Vector3();
            
            if (keys['w'] || keys['W']) velocity.z -= 1;
            if (keys['s'] || keys['S']) velocity.z += 1;
            if (keys['a'] || keys['A']) velocity.x -= 1;
            if (keys['d'] || keys['D']) velocity.x += 1;
            
            velocity.normalize();
            velocity.multiplyScalar(moveSpeed * deltaTime);
            velocity.applyQuaternion(camera.quaternion);
            velocity.y = 0; // 防止飛行
            
            // 碰撞檢測
            const futurePosition = camera.position.clone().add(velocity);
            if (!checkCollision(futurePosition)) {
                camera.position.add(velocity);
            }
        }
        
        function checkCollision(position) {
            const playerRadius = 1;
            
            for (let wall of walls) {
                const box = new THREE.Box3().setFromObject(wall);
                box.expandByScalar(playerRadius);
                
                if (box.containsPoint(position)) {
                    return true;
                }
            }
            
            return false;
        }
        
        function updateUI() {
            document.getElementById('health').textContent = Math.max(0, gameState.health);
            document.getElementById('ammo').textContent = gameState.ammo;
            document.getElementById('score').textContent = gameState.score;
            document.getElementById('enemies').textContent = enemies.length;
            
            // 更新小地圖
            updateMinimap();
        }
        
        function updateMinimap() {
            const minimap = document.getElementById('minimap');
            const ctx = minimap.getContext('2d');
            ctx.clearRect(0, 0, 150, 150);
            
            // 繪製背景
            ctx.fillStyle = 'rgba(50, 50, 50, 0.8)';
            ctx.fillRect(0, 0, 150, 150);
            
            // 繪製玩家
            const playerX = (camera.position.x + 100) / 200 * 150;
            const playerZ = (camera.position.z + 100) / 200 * 150;
            
            ctx.fillStyle = '#00ff00';
            ctx.beginPath();
            ctx.arc(playerX, playerZ, 3, 0, Math.PI * 2);
            ctx.fill();
            
            // 繪製敵人
            ctx.fillStyle = '#ff0000';
            enemies.forEach(enemy => {
                const enemyX = (enemy.position.x + 100) / 200 * 150;
                const enemyZ = (enemy.position.z + 100) / 200 * 150;
                ctx.beginPath();
                ctx.arc(enemyX, enemyZ, 2, 0, Math.PI * 2);
                ctx.fill();
            });
        }
        
        function setupEventListeners() {
            // 鍵盤事件
            document.addEventListener('keydown', (e) => {
                keys[e.key] = true;
                
                if (e.key === 'r' || e.key === 'R') {
                    reload();
                }
                
                if (e.key === 'Escape') {
                    gameState.paused = !gameState.paused;
                }
            });
            
            document.addEventListener('keyup', (e) => {
                keys[e.key] = false;
            });
            
            // 滑鼠事件
            document.addEventListener('click', (e) => {
                if (document.pointerLockElement) {
                    shoot();
                } else {
                    document.getElementById('gameCanvas').requestPointerLock();
                }
            });
            
            document.addEventListener('mousemove', (e) => {
                if (!document.pointerLockElement || gameState.gameOver) return;
                
                camera.rotation.y -= e.movementX * mouse.sensitivity;
                camera.rotation.x -= e.movementY * mouse.sensitivity;
                camera.rotation.x = Math.max(-Math.PI/2, Math.min(Math.PI/2, camera.rotation.x));
            });
            
            // 視窗調整
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        }
        
        function animate() {
            if (gameState.gameOver) return;
            
            requestAnimationFrame(animate);
            
            if (!gameState.paused) {
                const deltaTime = clock.getDelta();
                
                handleMovement(deltaTime);
                updateEnemies(deltaTime);
                updateBullets(deltaTime);
                updateUI();
            }
            
            renderer.render(scene, camera);
        }
        
        function endGame() {
            gameState.gameOver = true;
            document.getElementById('finalScore').textContent = `最終得分: ${gameState.score}`;
            document.getElementById('gameOver').style.display = 'block';
            document.exitPointerLock();
        }
        
        function restartGame() {
            // 清理場景
            enemies.forEach(enemy => scene.remove(enemy));
            bullets.forEach(bullet => scene.remove(bullet));
            enemies = [];
            bullets = [];
            
            // 重置遊戲狀態
            gameState = {
                health: 100,
                ammo: 30,
                maxAmmo: 30,
                score: 0,
                isReloading: false,
                gameOver: false,
                paused: false
            };
            
            // 重置玩家位置
            camera.position.set(0, 5, 0);
            camera.rotation.set(0, 0, 0);
            
            // 隱藏遊戲結束畫面
            document.getElementById('gameOver').style.display = 'none';
            
            // 重新生成敵人
            spawnEnemies();
            
            // 重新開始遊戲循環
            clock = new THREE.Clock();
            animate();
            
            // 重新鎖定滑鼠
            document.getElementById('gameCanvas').requestPointerLock();
        }
        
        // 啟動遊戲
        initGame();
    </script>
</body>
</html>
